
global proc initSimulator(string $nodeName)
{	
	// execute
	//print("nodeName:" + $nodeName)
	mpmSimulate -init -name $nodeName;	
	refresh -f;
}
// type: simulation type 
// 0		dynamic simulation
// 1		static simulation
// 2		static simulation with general force
global proc execSimulator(string $nodeName, int $type)
{
	int  $length = `intSliderGrp   -query -value simLengthSlider`;	
	// init progress bar
	global string $gMainProgressBar;
    progressBar -edit
        -beginProgress
        -isInterruptable true
        -status "Simulating... "
        -maxValue $length
        $gMainProgressBar;
		
	int  $begTime = `currentTime -q`;
	int  $t;
	$startSecond = `timerX`;
	for ($t = $begTime; $t < $begTime + $length; $t++)
	{	
		// step progress bar
        if(`progressBar -query -isCancelled $gMainProgressBar`)
            break;
		print("\n\ncurrent Frame:"+ $t + "\n");
        progressBar -edit -step 1 $gMainProgressBar;
			
		int $res;
		$frameStartSecond = `timerX`;
		switch($type)
		{
		case 0:
			$res = `mpmSimulate -step -name $nodeName`;
			break;
		}
		$frameTotalSecond = `timerX -startTime $frameStartSecond`;
		print ("Computation Time: "+$frameTotalSecond+"s\n");
		
		if($res == 0)
			break;
				
		currentTime ($t+1);
	}
	// code that is being timed
	$totalSecond = `timerX -startTime $startSecond`;
	$totalFrame= $t - $begTime;
	if ($totalFrame != 0)
	{
		float $timeRate = $totalSecond / float($totalFrame);
		print ("Total Time: "+$totalSecond+"s\n");
		print ("Average Time: "+$timeRate+"s\n");
	}
	
	// delete progress bar
    progressBar -edit  -endProgress $gMainProgressBar;
}
global proc saveSimulationData(string $nodeName)
{
	string $filePath = `getAttr ($nodeName+".resultPath")`;
	//`fileDialog -m 1`;
	// int $res = `rigSimulate -name $nodeName -save $filePath`;
}

// simulation buttons
global proc initSimulatorControl(string $attrName)
{
	string $nodeName = `plugNode $attrName`;
	setUITemplate -pst "attributeEditorTemplate";
		button -label "Initialize" -c ("initSimulator " + $nodeName) initButton;
		
		intSliderGrp 	-label "Simulation Length" -field true
						-minValue 1 -maxValue 100
						-fieldMinValue  1 -fieldMaxValue  10000
						-value 10
						simLengthSlider;
		button -label "Simulate" -c ("execSimulator " + $nodeName + " 0") simButton;
		button -label "Save Simulation Result" -c ("saveSimulationData " + $nodeName) saveButton;
	setUITemplate -ppt;
}

global proc modifySimulatorControl(string $attrName)
{
	string $nodeName = `plugNode $attrName`;
	button -e -c ("initSimulator " + $nodeName) initButton;	
	button -e -c ("execSimulator " + $nodeName + " 0") simButton;
	button -e -c ("saveSimulationData " + $nodeName) saveButton;
}

// main
global proc AEMpmSimulatorTemplate(string $nodeName)
{
	editorTemplate -beginScrollLayout;
		
		editorTemplate -beginLayout "Physical Parameters" -collapse true;
			editorTemplate -addControl "youngsModulus";
			editorTemplate -addControl "possionRatio";
			editorTemplate -addControl "hardeningFactor";
			editorTemplate -addControl "criticalCompression";
			editorTemplate -addControl "criticalStretch";
			editorTemplate -addControl "friction";
			editorTemplate -addControl "flipPercent";
			editorTemplate -addControl "particleMass";
			editorTemplate -addControl "gravity";
			editorTemplate -addControl "deltaTime";
		editorTemplate -endLayout;
		
		editorTemplate -beginLayout "Solver" -collapse false;
			editorTemplate -addControl "boxMin";
			editorTemplate -addControl "boxMax";
			editorTemplate -addControl "cellSize";
			editorTemplate -addControl "particlePerCell";
			editorTemplate -addControl "boundary";
			editorTemplate -callCustom "initSimulatorControl" "modifySimulatorControl" "noAttr";
		editorTemplate -endLayout;
				
		editorTemplate -suppress "initParticle";
		
		editorTemplate -beginLayout (uiRes("m_AElocatorTemplate.kLocatorAttributes")) -collapse true;
			AElocatorCommon $nodeName;
		editorTemplate -endLayout;

		AEgeometryShapeTemplate $nodeName;

		editorTemplate -addExtraControls;	
	editorTemplate -endScrollLayout;
}